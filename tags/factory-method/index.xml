<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>factory method on Svetlin Ralchev</title><link>http://blog.ralch.com/tags/factory-method/</link><description>Recent content in factory method on Svetlin Ralchev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 31 Jan 2016 08:46:53 +0000</lastBuildDate><atom:link href="http://blog.ralch.com/tags/factory-method/index.xml" rel="self" type="application/rss+xml"/><item><title>Desing Patterns in Golang: Factory Method</title><link>http://blog.ralch.com/articles/design-patterns/golang-factory-method/</link><pubDate>Sun, 31 Jan 2016 08:46:53 +0000</pubDate><guid>http://blog.ralch.com/articles/design-patterns/golang-factory-method/</guid><description>Introduction The Factory Method pattern is a design pattern used to define a runtime interface for creating an object. Itâ€™s called a factory because it creates various types of objects without necessarily knowing what kind of object it creates or how to create it.
Purpose Allows the sub-classes to choose the type of objects to create at runtime It provides a simple way of extending the family of objects with minor changes in application code.</description></item></channel></rss>