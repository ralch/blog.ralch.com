<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>adapter on Software adventures and thoughts</title><link>http://blog.ralch.com/tags/adapter/</link><description>Recent content in adapter on Software adventures and thoughts</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 22 Feb 2016 08:42:38 +0000</lastBuildDate><atom:link href="http://blog.ralch.com/tags/adapter/index.xml" rel="self" type="application/rss+xml"/><item><title>Design Patterns in Golang: Adapter</title><link>http://blog.ralch.com/articles/design-patterns/golang-adapter/</link><pubDate>Mon, 22 Feb 2016 08:42:38 +0000</pubDate><guid>http://blog.ralch.com/articles/design-patterns/golang-adapter/</guid><description>Introduction The Adapter Pattern is responsible for adaptation of two incompatible interfaces. It is a structural pattern that is responsible to join functionalities of independent or incompatible interfaces without modifing their implementation.
Interfaces may be incompatible but the inner functionality should suit the need. It allows otherwise incompatible objects to work together by converting the interface of each struct into an interface expected by the clients.
Purpose Impedance match an old component to a new system Wrap the interface of a object into another interface clients expect.</description></item></channel></rss>