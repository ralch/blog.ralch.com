<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>decorator on Svetlin Ralchev | Blog</title><link>http://blog.ralch.com/tags/decorator/</link><description>Recent content in decorator on Svetlin Ralchev | Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>(c) 2021 Svetlin Ralchev</copyright><lastBuildDate>Sun, 17 Apr 2016 18:33:52 +0100</lastBuildDate><atom:link href="http://blog.ralch.com/tags/decorator/index.xml" rel="self" type="application/rss+xml"/><item><title>Design Patterns in Golang: Decorator</title><link>http://blog.ralch.com/articles/design-patterns/golang-decorator/</link><pubDate>Sun, 17 Apr 2016 18:33:52 +0100</pubDate><guid>http://blog.ralch.com/articles/design-patterns/golang-decorator/</guid><description>Introduction The Decorator pattern adds new functionality to an existing object without altering its structure. It is a structural pattern as this pattern acts as a wrapper to existing class.
The instanciate a decorator struct which decorates (wraps) the original object and provides additional functionality keeping its methods signature intact.
Purpose Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to inheritance for extending functionality. Wrapping a present, putting it in a box, and wrapping the box.</description></item></channel></rss>