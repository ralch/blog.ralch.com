<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>pprof on Svetlin Ralchev | Blog</title><link>http://blog.ralch.com/tags/pprof/</link><description>Recent content in pprof on Svetlin Ralchev | Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 13 Dec 2015 13:39:32 +0000</lastBuildDate><atom:link href="http://blog.ralch.com/tags/pprof/index.xml" rel="self" type="application/rss+xml"/><item><title>Performance and memory analysis of Golang programs</title><link>http://blog.ralch.com/articles/golang-performance-and-memory-analysis/</link><pubDate>Sun, 13 Dec 2015 13:39:32 +0000</pubDate><guid>http://blog.ralch.com/articles/golang-performance-and-memory-analysis/</guid><description>As we continue looking at program metrics in Golang, it is time to look at performance matrics analysis.
Instrumentation Instrumentation is the process of adding code to your application to generate events to allow you to monitor application health and performance. Instrumentation allows you to profile applications. Profiling enables you to identify how long a particular method or operation takes to run and how efficient it is in terms of CPU and memory resource usage.</description></item></channel></rss>