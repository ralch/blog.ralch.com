<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>prototype on Svetlin Ralchev</title><link>http://blog.ralch.com/tags/prototype/</link><description>Recent content in prototype on Svetlin Ralchev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 06 Feb 2016 16:01:29 +0000</lastBuildDate><atom:link href="http://blog.ralch.com/tags/prototype/index.xml" rel="self" type="application/rss+xml"/><item><title>Design Patterns in Golang: Prototype</title><link>http://blog.ralch.com/articles/design-patterns/golang-prototype/</link><pubDate>Sat, 06 Feb 2016 16:01:29 +0000</pubDate><guid>http://blog.ralch.com/articles/design-patterns/golang-prototype/</guid><description>Preface The Prototype Pattern creates duplicate objects while keeping performance in mind. It&amp;rsquo;s a part of the creational patterns and provides one of the best ways to create an object.
In the mainstream languages (like C# and JAVA), it requires implementing a prototype interface which tells to create a clone of the current object. It is used when creation of object directly is costly.
For instance, an object is to be created after a costly database operation.</description></item></channel></rss>