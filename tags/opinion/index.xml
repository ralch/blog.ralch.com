<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>opinion on Svetlin Ralchev | Blog</title><link>http://blog.ralch.com/tags/opinion/</link><description>Recent content in opinion on Svetlin Ralchev | Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 03 Feb 2016 13:34:23 +0000</lastBuildDate><atom:link href="http://blog.ralch.com/tags/opinion/index.xml" rel="self" type="application/rss+xml"/><item><title>Design Patterns in Golang: The Good, the Bad and the Ugly</title><link>http://blog.ralch.com/articles/design-patterns/golang-design-patterns/</link><pubDate>Wed, 03 Feb 2016 13:34:23 +0000</pubDate><guid>http://blog.ralch.com/articles/design-patterns/golang-design-patterns/</guid><description>Recently I started a series of articles about Gang of Four Design Patterns and their adoption in Golang. They made a lot of noise in the community. I read a lot of contradictionary opionions whether should be used or not. I am publishing those articles as show case how the common design patterns can be adopted and implemented in Golang. I don&amp;rsquo;t encourage or promote their usage. Every developer has own style of programming, architecture desing and problem solving solutions.</description></item></channel></rss>