<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>singleton on Svetlin Ralchev | Blog</title><link>http://blog.ralch.com/tags/singleton/</link><description>Recent content in singleton on Svetlin Ralchev | Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 17 Jan 2016 13:35:05 +0000</lastBuildDate><atom:link href="http://blog.ralch.com/tags/singleton/index.xml" rel="self" type="application/rss+xml"/><item><title>Design Patterns in Golang: Singleton</title><link>http://blog.ralch.com/articles/design-patterns/golang-singleton/</link><pubDate>Sun, 17 Jan 2016 13:35:05 +0000</pubDate><guid>http://blog.ralch.com/articles/design-patterns/golang-singleton/</guid><description>Introduction Sometimes it&amp;rsquo;s important to have only one instance of an struct. This is useful when exactly one object is needed to coordinate actions across the system. Singletons provide a global point of access to themselves.
The singleton pattern is one of the simplest design patterns. It requires only one type which is responsible to instantiate itself, to make sure it creates not more than one instance. The same instance can be used from everywhere.</description></item></channel></rss>