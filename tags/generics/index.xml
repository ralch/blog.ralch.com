<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>generics on Svetlin Ralchev | Blog</title><link>http://blog.ralch.com/tags/generics/</link><description>Recent content in generics on Svetlin Ralchev | Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>(c) 2023 Svetlin Ralchev</copyright><lastBuildDate>Sun, 18 Oct 2015 05:00:00 +0100</lastBuildDate><atom:link href="http://blog.ralch.com/tags/generics/index.xml" rel="self" type="application/rss+xml"/><item><title>Generics in Golang</title><link>http://blog.ralch.com/articles/golang-code-generation-and-generics/</link><pubDate>Sun, 18 Oct 2015 05:00:00 +0100</pubDate><guid>http://blog.ralch.com/articles/golang-code-generation-and-generics/</guid><description>In the article we will take the advantage of [generics] even that they are not first citizen in Go. We will explore gen and genny command line tools.
Gen Gen is a code generation tool that brings some generic query functions. It uses annotations to add this functionality to any structure. The generated code is part of your package and does not have any external dependencies. This approach avoids any reflection and produces an efficient concrete implementation for any annotated type.</description></item></channel></rss>