<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>composite on Software adventures and thoughts</title><link>http://blog.ralch.com/tags/composite/</link><description>Recent content in composite on Software adventures and thoughts</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 31 Mar 2016 09:00:27 +0100</lastBuildDate><atom:link href="http://blog.ralch.com/tags/composite/index.xml" rel="self" type="application/rss+xml"/><item><title>Design Patterns in Golang: Composite</title><link>http://blog.ralch.com/articles/design-patterns/golang-composite/</link><pubDate>Thu, 31 Mar 2016 09:00:27 +0100</pubDate><guid>http://blog.ralch.com/articles/design-patterns/golang-composite/</guid><description>Introduction A Composite Design Pattern is a structural pattern that uses to employ composition when implementing an interface rather than using multiple inheritance. It composes objects into tree structures and lets clients treat individual objects and compositions uniformly.
There are situations when clients ignore the difference between compositions of objects and individual objects. If dealing with multiple objects in the same way as handle each of deam is identical, the Composite Design pattern is a good choice to decrease the complexity and treat them as homogeneous.</description></item></channel></rss>