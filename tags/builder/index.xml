<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>builder on Svetlin Ralchev</title><link>http://blog.ralch.com/tags/builder/</link><description>Recent content in builder on Svetlin Ralchev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 24 Jan 2016 08:46:53 +0000</lastBuildDate><atom:link href="http://blog.ralch.com/tags/builder/index.xml" rel="self" type="application/rss+xml"/><item><title>Desing Patterns in Golang: Builder</title><link>http://blog.ralch.com/articles/design-patterns/golang-builder/</link><pubDate>Sun, 24 Jan 2016 08:46:53 +0000</pubDate><guid>http://blog.ralch.com/articles/design-patterns/golang-builder/</guid><description>Introduction The Builder Pattern is a creational design pattern that&amp;rsquo;s used to encapsulate the construction logic for an object. It is often used when the construction process of an object is complex. The patterns is well suited for constructing different representations of the same class.
Purpose Separate the construction of a complex object from its representation so that the same construction process can create different representations. A common software creational design pattern that&amp;rsquo;s used to encapsulate the construction logic for an object.</description></item></channel></rss>