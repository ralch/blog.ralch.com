<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>code generation on Svetlin Ralchev | Blog</title><link>http://blog.ralch.com/tags/code-generation/</link><description>Recent content in code generation on Svetlin Ralchev | Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>(c) 2021 Svetlin Ralchev</copyright><lastBuildDate>Sat, 31 Oct 2015 08:41:39 +0100</lastBuildDate><atom:link href="http://blog.ralch.com/tags/code-generation/index.xml" rel="self" type="application/rss+xml"/><item><title>Develop code generation tool for Golang</title><link>http://blog.ralch.com/articles/golang-code-generation-tool-implementation/</link><pubDate>Sat, 31 Oct 2015 08:41:39 +0100</pubDate><guid>http://blog.ralch.com/articles/golang-code-generation-tool-implementation/</guid><description>In my previous blog post, we discussed one of my favourite code generation tools for Go. We found that they can be used to automate our trivial development tasks or even introduce features like generics and queries. Lets explore how to create our own tool.
Introduction The Go generate subcommand is a program that scans for special comments in your Go source code. The comment declares a command that should be executed.</description></item><item><title>Generics in Golang</title><link>http://blog.ralch.com/articles/golang-code-generation-and-generics/</link><pubDate>Sun, 18 Oct 2015 05:00:00 +0100</pubDate><guid>http://blog.ralch.com/articles/golang-code-generation-and-generics/</guid><description>In the article we will take the advantage of [generics] even that they are not first citizen in Go. We will explore gen and genny command line tools.
Gen Gen is a code generation tool that brings some generic query functions. It uses annotations to add this functionality to any structure. The generated code is part of your package and does not have any external dependencies. This approach avoids any reflection and produces an efficient concrete implementation for any annotated type.</description></item><item><title>Reusing source code with Go templates</title><link>http://blog.ralch.com/articles/golang-code-generation-with-gotemplates/</link><pubDate>Sun, 11 Oct 2015 20:42:57 +0100</pubDate><guid>http://blog.ralch.com/articles/golang-code-generation-with-gotemplates/</guid><description>In one of my previous blog posts, we discovered go generate command line tool. Lets take the next step and evaluate its advanced benefits to generate a source code by using our own templates. We will explore gotemplate command line tool.
Overview This command line tool manages package based Go templates using go generate. By default it provides a set of templates that can be used out of the box:</description></item><item><title>Golang code generation</title><link>http://blog.ralch.com/articles/golang-code-generation/</link><pubDate>Sun, 04 Oct 2015 08:49:59 +0100</pubDate><guid>http://blog.ralch.com/articles/golang-code-generation/</guid><description>Programs that produce source code are important elements in software engineering. Since Go 1.4, the language ecosystem includes a command line tool that makes it easier to run such tools.
It&amp;rsquo;s called go generate. It scans for special comments in Go source code that identify general commands to run:
//go:generate &amp;lt;subcommand&amp;gt; &amp;lt;arguments&amp;gt; Go generate is not part of go build. It does not do dependency analysis and must be run explicitly before running go build.</description></item></channel></rss>