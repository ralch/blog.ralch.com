<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>embedded resources on Svetlin Ralchev | Blog</title><link>http://blog.ralch.com/tags/embedded-resources/</link><description>Recent content in embedded resources on Svetlin Ralchev | Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>(c) 2023 Svetlin Ralchev</copyright><lastBuildDate>Sun, 08 Nov 2015 08:35:11 +0000</lastBuildDate><atom:link href="http://blog.ralch.com/tags/embedded-resources/index.xml" rel="self" type="application/rss+xml"/><item><title>Embedded resources in Golang</title><link>http://blog.ralch.com/articles/golang-embedded-resources/</link><pubDate>Sun, 08 Nov 2015 08:35:11 +0000</pubDate><guid>http://blog.ralch.com/articles/golang-embedded-resources/</guid><description>What&amp;rsquo;s an Embedded Resource? An embedded resource in a application is a file that is included as part of the application. The file is not compiled, but is accessable from the code at run-time. Embedded resources can be any file type.
Languages as JAVA and C# support resources out of box. However, this is not the case for Golang. In order to emebed resource, we need to develop our own solution.</description></item></channel></rss>