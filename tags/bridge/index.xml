<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>bridge on Svetlin Ralchev | Blog</title><link>http://blog.ralch.com/tags/bridge/</link><description>Recent content in bridge on Svetlin Ralchev | Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>(c) 2023 Svetlin Ralchev</copyright><lastBuildDate>Thu, 17 Mar 2016 17:26:46 +0000</lastBuildDate><atom:link href="http://blog.ralch.com/tags/bridge/index.xml" rel="self" type="application/rss+xml"/><item><title>Desing Patterns in Golang: Bridge</title><link>http://blog.ralch.com/articles/design-patterns/golang-bridge/</link><pubDate>Thu, 17 Mar 2016 17:26:46 +0000</pubDate><guid>http://blog.ralch.com/articles/design-patterns/golang-bridge/</guid><description>Introduction The Bridge Pattern is a creational design pattern used to decouple an abstraction from its implementation. The bridge uses encapsulation, aggregation, and can use inheritance to separate responsibilities into different classes.
Purpose Decouple an abstraction from its implementation that allows both to vary independently. Publish interface in an inheritance hierarchy, and bury implementation in its own inheritance hierarchy. Design Pattern Diagram The objects participating in this pattern are presented on the following diagram:</description></item></channel></rss>