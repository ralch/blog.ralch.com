<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>reflect on Svetlin Ralchev | Blog</title><link>http://blog.ralch.com/tags/reflect/</link><description>Recent content in reflect on Svetlin Ralchev | Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>(c) 2021 Svetlin Ralchev</copyright><lastBuildDate>Tue, 21 Mar 2017 12:33:56 +0100</lastBuildDate><atom:link href="http://blog.ralch.com/tags/reflect/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang: Extending reflect.StructTag to support duplicates</title><link>http://blog.ralch.com/articles/golang-reflect-struct-tag/</link><pubDate>Tue, 21 Mar 2017 12:33:56 +0100</pubDate><guid>http://blog.ralch.com/articles/golang-reflect-struct-tag/</guid><description>Presently, Golang has limited support of reflection comparing to the mainstream languages like C# and JAVA. It&amp;rsquo;s not intended to match or beat that languages.
In practice, we are using StructTag to add some metadata for the defined struct fields. Such an example is json package, where you can customize the field marshaling.
In example below, we customize the json representation of User struct fields:
type User struct { ID string `json:&amp;#34;id&amp;#34;` Name string `json:&amp;#34;name&amp;#34;` CreatedAt time.</description></item></channel></rss>