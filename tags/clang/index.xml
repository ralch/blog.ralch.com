<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>clang on Svetlin Ralchev</title><link>http://blog.ralch.com/tags/clang/</link><description>Recent content in clang on Svetlin Ralchev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 16 Aug 2015 08:40:35 +0100</lastBuildDate><atom:link href="http://blog.ralch.com/tags/clang/index.xml" rel="self" type="application/rss+xml"/><item><title>Conditional compilation in Golang</title><link>http://blog.ralch.com/articles/golang-conditional-compilation/</link><pubDate>Sun, 16 Aug 2015 08:40:35 +0100</pubDate><guid>http://blog.ralch.com/articles/golang-conditional-compilation/</guid><description>When developing Go package or application that depends on specific features of the underlying platform or architecture it is often necessary to use a specialised implementation.
There are two parts of Go conditional compilation system, which we will now explore in more detail.
Build constraints A build constraints (known as build tags) is an optional top line comment that starts with
// +build package api Declaration of build constraints follows the following rules:</description></item></channel></rss>