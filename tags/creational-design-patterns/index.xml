<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>creational design patterns on Svetlin Ralchev | Blog</title><link>http://blog.ralch.com/tags/creational-design-patterns/</link><description>Recent content in creational design patterns on Svetlin Ralchev | Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>(c) 2021 Svetlin Ralchev</copyright><lastBuildDate>Thu, 17 Mar 2016 17:26:46 +0000</lastBuildDate><atom:link href="http://blog.ralch.com/tags/creational-design-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Desing Patterns in Golang: Bridge</title><link>http://blog.ralch.com/articles/design-patterns/golang-bridge/</link><pubDate>Thu, 17 Mar 2016 17:26:46 +0000</pubDate><guid>http://blog.ralch.com/articles/design-patterns/golang-bridge/</guid><description>Introduction The Bridge Pattern is a creational design pattern used to decouple an abstraction from its implementation. The bridge uses encapsulation, aggregation, and can use inheritance to separate responsibilities into different classes.
Purpose Decouple an abstraction from its implementation that allows both to vary independently. Publish interface in an inheritance hierarchy, and bury implementation in its own inheritance hierarchy. Design Pattern Diagram The objects participating in this pattern are presented on the following diagram:</description></item><item><title>Design Patterns in Golang: Prototype</title><link>http://blog.ralch.com/articles/design-patterns/golang-prototype/</link><pubDate>Sat, 06 Feb 2016 16:01:29 +0000</pubDate><guid>http://blog.ralch.com/articles/design-patterns/golang-prototype/</guid><description>Preface The Prototype Pattern creates duplicate objects while keeping performance in mind. It&amp;rsquo;s a part of the creational patterns and provides one of the best ways to create an object.
In the mainstream languages (like C# and JAVA), it requires implementing a prototype interface which tells to create a clone of the current object. It is used when creation of object directly is costly.
For instance, an object is to be created after a costly database operation.</description></item><item><title>Desing Patterns in Golang: Factory Method</title><link>http://blog.ralch.com/articles/design-patterns/golang-factory-method/</link><pubDate>Sun, 31 Jan 2016 08:46:53 +0000</pubDate><guid>http://blog.ralch.com/articles/design-patterns/golang-factory-method/</guid><description>Introduction The Factory Method pattern is a design pattern used to define a runtime interface for creating an object. Itâ€™s called a factory because it creates various types of objects without necessarily knowing what kind of object it creates or how to create it.
Purpose Allows the sub-classes to choose the type of objects to create at runtime It provides a simple way of extending the family of objects with minor changes in application code.</description></item><item><title>Desing Patterns in Golang: Builder</title><link>http://blog.ralch.com/articles/design-patterns/golang-builder/</link><pubDate>Sun, 24 Jan 2016 08:46:53 +0000</pubDate><guid>http://blog.ralch.com/articles/design-patterns/golang-builder/</guid><description>Introduction The Builder Pattern is a creational design pattern that&amp;rsquo;s used to encapsulate the construction logic for an object. It is often used when the construction process of an object is complex. The patterns is well suited for constructing different representations of the same class.
Purpose Separate the construction of a complex object from its representation so that the same construction process can create different representations. A common software creational design pattern that&amp;rsquo;s used to encapsulate the construction logic for an object.</description></item><item><title>Design Patterns in Golang: Singleton</title><link>http://blog.ralch.com/articles/design-patterns/golang-singleton/</link><pubDate>Sun, 17 Jan 2016 13:35:05 +0000</pubDate><guid>http://blog.ralch.com/articles/design-patterns/golang-singleton/</guid><description>Introduction Sometimes it&amp;rsquo;s important to have only one instance of an struct. This is useful when exactly one object is needed to coordinate actions across the system. Singletons provide a global point of access to themselves.
The singleton pattern is one of the simplest design patterns. It requires only one type which is responsible to instantiate itself, to make sure it creates not more than one instance. The same instance can be used from everywhere.</description></item></channel></rss>