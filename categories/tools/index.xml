<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>tools on Svetlin Ralchev | Blog</title><link>http://blog.ralch.com/categories/tools/</link><description>Recent content in tools on Svetlin Ralchev | Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>(c) 2021 Svetlin Ralchev</copyright><lastBuildDate>Sat, 31 Oct 2015 08:41:39 +0100</lastBuildDate><atom:link href="http://blog.ralch.com/categories/tools/index.xml" rel="self" type="application/rss+xml"/><item><title>Develop code generation tool for Golang</title><link>http://blog.ralch.com/articles/golang-code-generation-tool-implementation/</link><pubDate>Sat, 31 Oct 2015 08:41:39 +0100</pubDate><guid>http://blog.ralch.com/articles/golang-code-generation-tool-implementation/</guid><description>In my previous blog post, we discussed one of my favourite code generation tools for Go. We found that they can be used to automate our trivial development tasks or even introduce features like generics and queries. Lets explore how to create our own tool.
Introduction The Go generate subcommand is a program that scans for special comments in your Go source code. The comment declares a command that should be executed.</description></item><item><title>Golang code inspection tools</title><link>http://blog.ralch.com/articles/golang-tools-inspection/</link><pubDate>Sun, 13 Sep 2015 08:55:41 +0100</pubDate><guid>http://blog.ralch.com/articles/golang-tools-inspection/</guid><description>As a software engineer, you always try to improve the quality of your programs. We are looking for the best software development practices and TDD techniques.
&amp;quot;Have no fear of perfection - you'll never reach it.&amp;quot; ― Salvador Dalí In this article we will explore different code inspection tools in Go ecosystem. We will increase our code quality and engineering skills by running tools that will do analysis on our code base and report the suspicious parts of it.</description></item><item><title>Golang code comprehension tools</title><link>http://blog.ralch.com/articles/golang-tools-comprehension/</link><pubDate>Sun, 06 Sep 2015 08:52:51 +0100</pubDate><guid>http://blog.ralch.com/articles/golang-tools-comprehension/</guid><description>Software engineers spend a greater part of time reading and understanding programs. Indeed, most of the time it takes to develop a program is spent reading it and making logical conclusion about what it does.
Go programmers are no exception. Thanks to gofmt they should not worry about source code formatting. The machines are better suited to analyse source code and accomplish comprehension tasks than us.
In this article we will explore several of Go comprehension tools that are responsible for locating definitions, ascertaining types of expressions, deducing implementation relation, computing method sets, finding callers/callees, jumping through channels, understanding aliasing.</description></item><item><title>Golang refactoring tools</title><link>http://blog.ralch.com/articles/golang-tools-refactoring/</link><pubDate>Sun, 30 Aug 2015 12:41:34 +0100</pubDate><guid>http://blog.ralch.com/articles/golang-tools-refactoring/</guid><description>Go language provides many useful tools as part of its development eco system. We will explore most of them in the upcoming blog posts. But in the article lets focus on refactoring tools.
Gofmt In average programming languages developers can adapt to different formatting styles. Common problem is how to approach unknown code base without a long prescriptive style guide.
Go takes an unusual approach and keep this responsibility to format the source code for you.</description></item></channel></rss>