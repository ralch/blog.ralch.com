<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>design patterns on Svetlin Ralchev | Blog</title><link>http://blog.ralch.com/categories/design-patterns/</link><description>Recent content in design patterns on Svetlin Ralchev | Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>(c) 2023 Svetlin Ralchev</copyright><lastBuildDate>Sun, 17 Apr 2016 18:33:52 +0100</lastBuildDate><atom:link href="http://blog.ralch.com/categories/design-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Design Patterns in Golang: Decorator</title><link>http://blog.ralch.com/articles/design-patterns/golang-decorator/</link><pubDate>Sun, 17 Apr 2016 18:33:52 +0100</pubDate><guid>http://blog.ralch.com/articles/design-patterns/golang-decorator/</guid><description>Introduction The Decorator pattern adds new functionality to an existing object without altering its structure. It is a structural pattern as this pattern acts as a wrapper to existing class.
The instanciate a decorator struct which decorates (wraps) the original object and provides additional functionality keeping its methods signature intact.
Purpose Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to inheritance for extending functionality. Wrapping a present, putting it in a box, and wrapping the box.</description></item><item><title>Design Patterns in Golang: Composite</title><link>http://blog.ralch.com/articles/design-patterns/golang-composite/</link><pubDate>Thu, 31 Mar 2016 09:00:27 +0100</pubDate><guid>http://blog.ralch.com/articles/design-patterns/golang-composite/</guid><description>Introduction A Composite Design Pattern is a structural pattern that uses to employ composition when implementing an interface rather than using multiple inheritance. It composes objects into tree structures and lets clients treat individual objects and compositions uniformly.
There are situations when clients ignore the difference between compositions of objects and individual objects. If dealing with multiple objects in the same way as handle each of deam is identical, the Composite Design pattern is a good choice to decrease the complexity and treat them as homogeneous.</description></item><item><title>Desing Patterns in Golang: Bridge</title><link>http://blog.ralch.com/articles/design-patterns/golang-bridge/</link><pubDate>Thu, 17 Mar 2016 17:26:46 +0000</pubDate><guid>http://blog.ralch.com/articles/design-patterns/golang-bridge/</guid><description>Introduction The Bridge Pattern is a creational design pattern used to decouple an abstraction from its implementation. The bridge uses encapsulation, aggregation, and can use inheritance to separate responsibilities into different classes.
Purpose Decouple an abstraction from its implementation that allows both to vary independently. Publish interface in an inheritance hierarchy, and bury implementation in its own inheritance hierarchy. Design Pattern Diagram The objects participating in this pattern are presented on the following diagram:</description></item><item><title>Design Patterns in Golang: Adapter</title><link>http://blog.ralch.com/articles/design-patterns/golang-adapter/</link><pubDate>Mon, 22 Feb 2016 08:42:38 +0000</pubDate><guid>http://blog.ralch.com/articles/design-patterns/golang-adapter/</guid><description>Introduction The Adapter Pattern is responsible for adaptation of two incompatible interfaces. It is a structural pattern that is responsible to join functionalities of independent or incompatible interfaces without modifing their implementation.
Interfaces may be incompatible but the inner functionality should suit the need. It allows otherwise incompatible objects to work together by converting the interface of each struct into an interface expected by the clients.
Purpose Impedance match an old component to a new system Wrap the interface of a object into another interface clients expect.</description></item><item><title>Design Patterns in Golang: Prototype</title><link>http://blog.ralch.com/articles/design-patterns/golang-prototype/</link><pubDate>Sat, 06 Feb 2016 16:01:29 +0000</pubDate><guid>http://blog.ralch.com/articles/design-patterns/golang-prototype/</guid><description>Preface The Prototype Pattern creates duplicate objects while keeping performance in mind. It&amp;rsquo;s a part of the creational patterns and provides one of the best ways to create an object.
In the mainstream languages (like C# and JAVA), it requires implementing a prototype interface which tells to create a clone of the current object. It is used when creation of object directly is costly.
For instance, an object is to be created after a costly database operation.</description></item><item><title>Design Patterns in Golang: The Good, the Bad and the Ugly</title><link>http://blog.ralch.com/articles/design-patterns/golang-design-patterns/</link><pubDate>Wed, 03 Feb 2016 13:34:23 +0000</pubDate><guid>http://blog.ralch.com/articles/design-patterns/golang-design-patterns/</guid><description>Recently I started a series of articles about Gang of Four Design Patterns and their adoption in Golang. They made a lot of noise in the community. I read a lot of contradictionary opionions whether should be used or not. I am publishing those articles as show case how the common design patterns can be adopted and implemented in Golang. I don&amp;rsquo;t encourage or promote their usage. Every developer has own style of programming, architecture desing and problem solving solutions.</description></item><item><title>Desing Patterns in Golang: Factory Method</title><link>http://blog.ralch.com/articles/design-patterns/golang-factory-method/</link><pubDate>Sun, 31 Jan 2016 08:46:53 +0000</pubDate><guid>http://blog.ralch.com/articles/design-patterns/golang-factory-method/</guid><description>Introduction The Factory Method pattern is a design pattern used to define a runtime interface for creating an object. Itâ€™s called a factory because it creates various types of objects without necessarily knowing what kind of object it creates or how to create it.
Purpose Allows the sub-classes to choose the type of objects to create at runtime It provides a simple way of extending the family of objects with minor changes in application code.</description></item><item><title>Desing Patterns in Golang: Builder</title><link>http://blog.ralch.com/articles/design-patterns/golang-builder/</link><pubDate>Sun, 24 Jan 2016 08:46:53 +0000</pubDate><guid>http://blog.ralch.com/articles/design-patterns/golang-builder/</guid><description>Introduction The Builder Pattern is a creational design pattern that&amp;rsquo;s used to encapsulate the construction logic for an object. It is often used when the construction process of an object is complex. The patterns is well suited for constructing different representations of the same class.
Purpose Separate the construction of a complex object from its representation so that the same construction process can create different representations. A common software creational design pattern that&amp;rsquo;s used to encapsulate the construction logic for an object.</description></item><item><title>Design Patterns in Golang: Singleton</title><link>http://blog.ralch.com/articles/design-patterns/golang-singleton/</link><pubDate>Sun, 17 Jan 2016 13:35:05 +0000</pubDate><guid>http://blog.ralch.com/articles/design-patterns/golang-singleton/</guid><description>Introduction Sometimes it&amp;rsquo;s important to have only one instance of an struct. This is useful when exactly one object is needed to coordinate actions across the system. Singletons provide a global point of access to themselves.
The singleton pattern is one of the simplest design patterns. It requires only one type which is responsible to instantiate itself, to make sure it creates not more than one instance. The same instance can be used from everywhere.</description></item><item><title>Concurrent patterns in Golang: Context</title><link>http://blog.ralch.com/articles/golang-concurrency-patterns-context/</link><pubDate>Sun, 29 Nov 2015 08:50:48 +0000</pubDate><guid>http://blog.ralch.com/articles/golang-concurrency-patterns-context/</guid><description>What is concurrency? Concurrent applications have multiple computations executing during overlapping periods of time. Respectively sequential programs in which no computations can be executed in overlapping periods of time.
Getting started with Context package The Context package is responsible for signal cancelation and operation deadlines for processes and server requests.
The package has an context.Context interface:
type Context interface { Deadline() (deadline time.Time, ok bool) Done() &amp;lt;-chan struct{} Err() error Value(key interface{}) interface{} } The interface provides four functions to observe the context state:</description></item></channel></rss>